// suprrimer une section d'une ligne
  supprimerSection(section:any, index:any){
    // // console.log("La section à supprimer: ");
    // // console.log(section);
    let tabSections = this.ligne.sections; //Recupère les sections de la ligne
    if(tabSections.length <=2){
      sweetAlertMessage("error", "Suppression impossible", "La ligne doit avoir une moins un point d'arret ")
    } else {
      
      if(index == 0){ // On vérifie si c'est pas la première section 
        // // console.log("C'est la premiere section: ",  tabSections[index]);
        // La section suivante prend la place de la première 
        tabSections[index + 1].depart = tabSections[index].depart;
        // // console.log("La section suivante: ",  tabSections[index + 1]);
        // On met à jour la section suivante 
        this.updateSectionFonction(tabSections[index + 1].id, tabSections[index + 1]);

        // On supprime la section 
        this.deleteSectionFunction(section.id);
        sweetAlertMessage("success", "", "Section supprimer avec succes")
      }      
      else if(index >0 &&  index < tabSections.length - 1){ // On prend les deux section qui l'entoure 
        // la section avant 
        // console.log("Section avant :", tabSections[index - 1] );
        // console.log("Section :", tabSections[index] );
        // console.log("Section apres :", tabSections[index + 1] );        
      } else{ // On vérifie si c'est pas la dernière section 
        // console.log("C'est la derniere section :", tabSections[index] );        
      }
    }   
  }

   // Methode qui fait appel au service pour la suppression d'une section
  deleteSectionFunction(idSection:any){
    this.sectionService.deleteSection(idSection).subscribe(
      (data:any)=>{
        // console.log("Sucess");
        // console.log(data);  
      },
      (err: any) =>{
        // console.log("Erreur");
        // console.log(err);
      }
    )
  }